if: branch =~ ^master$|^development$|^release|^uat
language: python
python:
  - "2.7"

group: stable
dist: trusty
os: linux
sudo: required
services:
- docker
cache: pip

before_install: |-
  set -e
  if [ "master" == "${TRAVIS_BRANCH}" ]; then
    for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
      eval export ${env_value%_PRODUCTION}="${!env_value}"
    done
    export ENVIRONMENT=production
  elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
    for env_value in $(compgen -v |grep '.*_STAGING$'); do
      eval export ${env_value%_STAGING}="${!env_value}"
    done
    export ENVIRONMENT=staging
  else
    for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
      eval export ${env_value%_DEVELOPMENT}="${!env_value}"
    done
    export ENVIRONMENT=development
  fi

install:
    sudo python2 --version && sudo ll -a /usr/bin/ 
    - echo "skip test"

script:
    - echo "skip test"

before_deploy: |-
  set -e
  # install awscli for ecr upload
  pip install awscli --upgrade
  tag_build_num="0.0.${TRAVIS_BUILD_NUMBER}"
  #dd01-ec
  export EC_IMAGE="${EC_AWS_REGISTRY_ID}.dkr.ecr.${EC_AWS_REGION}.amazonaws.com/$EC_AWS_ECR_NAME:$tag_build_num"
  export EC_IMAGE_LATEST="${EC_AWS_REGISTRY_ID}.dkr.ecr.${EC_AWS_REGION}.amazonaws.com/$EC_AWS_ECR_NAME:latest"
  export EC_ECR_LOGIN="aws ecr get-login --registry-ids $EC_AWS_REGISTRY_ID --region $EC_AWS_REGION --no-include-email"

  # build the final image
  docker build -t "$EC_IMAGE" -t $EC_IMAGE_LATEST \
    --build-arg BUILD_ENV=$ENVIRONMENT \
    --build-arg NPM_TOKEN=$NPM_TOKEN \
    --build-arg TRAVIS_BRANCH=$TRAVIS_BRANCH \
    --build-arg TRAVIS_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER \
    --build-arg TRAVIS_COMMIT=$TRAVIS_COMMIT \
    --build-arg TRAVIS_TIMESTAMP="$(date)" \
    .

  # cp static for s3
  docker run --rm \
    -v $PWD/s3_upload:/s3_upload \
    -v $PWD/ec_s3_upload:/ec_s3_upload/ \
    --entrypoint "" \
    ${EC_IMAGE} \
    sh -c "cp -R /srv/* /s3_upload/"

deploy:
- provider: script
  script:  >-
      $(AWS_ACCESS_KEY_ID=${EC_AWS_ECR_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${EC_AWS_ECR_SECRET_ACCESS_KEY} ${EC_ECR_LOGIN})
      && docker push ${EC_IMAGE}
      && docker push ${EC_IMAGE_LATEST}
  skip_cleanup: true
  on:
    all_branches: true

- provider: s3
  access_key_id: $EC_AWS_S3_STATIC_ASSETS_ACCESS_KEY_ID
  secret_access_key: $EC_AWS_S3_STATIC_ASSETS_SECRET_KEY
  bucket: $EC_AWS_S3_STATIC_ASSETS_BUCKET
  region: $EC_AWS_REGION
  local_dir: s3_upload
  skip_cleanup: true
  on:
    all_branches: true
